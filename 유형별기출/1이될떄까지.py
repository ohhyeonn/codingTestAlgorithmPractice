# 문제
# N과 K를 입력받는다.
# N이 1이 될때까지 다음의 두과정 중하나를 반복적으로 수행해야하고 최소의 수행횟수를 구하는 문제이다.
# 1. N에서 1을 뺀다.
# 2. N을 K로 나눈다.
# 단 2번 연산은 N이 K로 나누어 떨어질때 수행가능하다.
# 
# 
# 입력조건
# 첫째줄에 N(2<=N<=100,0000), K(2<=K<=100,000)의 자연수가 주어지며, 각 자연수는 공백으로 구분한다. 이때 N은 K보다 항상 크거나 같다.
# 
# 출력조건 
# 첫째줄에 N이 1이 될때까지 1번 혹은 2번의의 연산을 수행하는 최소 수행 횟수값을 출력한다.


# 두가지 방법이있다 
# 1빼기연산을 1씩 빼는 방법
# 1빼기연산을 한번에 빼는 방법


# 1빼기 연산을 1씩 빼는 방법
# 1빼기 연산을 1씩 빼는 방법
# 1빼기 연산을 1씩 빼는 방법
# 1빼기 연산을 1씩 빼는 방법
n , k = map(int, input().split())
result = 0

# N이 K이상이라면 K로 계속 나눈다.
while n >= k :
    # N이 K로 나누어 떨어지지 않는다면 N에서 1씩 빼기
    while n % k != 0:
        n -= 1
        result += 1
    # K로 나누기
    n //= k
    result += 1
# 마지막으로 남은 수에 대하여 1씩 빼기
while n > 1:
    n -= 1
    result += 1

print(result)





# 1빼기연산을 한번에 빼는 방법
# 1빼기연산을 한번에 빼는 방법
# 1빼기연산을 한번에 빼는 방법
# 1빼기연산을 한번에 빼는 방법
# 범위가 만이다 그렇기에 효율적인 방법이 중요하게 된다.
# N , K 를 공백으로 구분하여 입력받기
n , k = map(int, input().split())
result = 0

while True:
    # (N ==K 로 나누어떨어지는수)가 될 때까지 1 씩 뺴기
    target = (n//k) *k
    result += (n - target)
    n = target 
    # N 이 K보다 작을 때 (더이상 나눌수 없을 때) 반복문 탈출
    if n < k:
        break
    # K로 나누기
    result += 1
    n //= k
# 마지막으로 남은 수에 대하여 1 씩 빼기
result += (n -1)
print(result)

