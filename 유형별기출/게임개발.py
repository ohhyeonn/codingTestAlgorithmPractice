# 문제
# 게임 개발은 아니고 그냥 2차원의 맵을 받고 그맵의 한점을 받고 그 점에서 로직에따라 이동할때 이동가능한 개수를 출력하는 프로그램을 만든다.
# 맵의 가에는 바다로 접근이 불가하다
# 한번 가본 곳은 다시 가지 않는다.
# 등등인데 책에 나와있는 내용을 작성하면
# 
# 1. 현재위치에서 현재 방향을 기준으로 왼쪽 방향 (반시계 방향으로 90도 회전한 방향) 부터 차례대로 갈곳을 정한다.
# 2. 캐릭터으 ㅣ바로 왼쪾 방향 바로앞에 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전한 다음 왼쪽으로 한 칸을 전진한다. 왼쪽 방향에 가보지 않은 칸이 없다면, 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.
# 3. 만약 네 방향 모두 이미 가본 칸이거나 바다로 되어 있는 칸인 경우에는 , 바라보는 방향을 유지한 채로 한 칸 뒤로 가고 1단계로  돌악나다. 단, 이때 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없는 경우에는 움직임을(게임을) 멈춘다. 
#  
# ***************핵심*****************
# 핵심은 위조건으로 함수를 끄집어내고 반복문으로 함수를 돌려가며 프로그램을 짠다 이다.
# ***************핵심*****************
# 
# ** 키포인트는 맨처음 시작하는 위치를 이미 방문한 위치로 설정한다는것 등의 놓쳐서는 안될 거시기들이 겠다. 사실 이런 부분은 시작부분에 알려줘야 되는거같긴한데 몰라무튼 이런 놓치지 말아야 할것들이 존재하고
# ** 또 이미 방문한 부분은 맵을 또 하나 맹그러서 그안에 1이면 방문한거고 0이면 아직 방문안한거고 그런방식 그니까 이동할 맵이 따로있고 또 맵이 있는데 그맵에는 방문한건지 아닌지 등의 정보가 담겨있고 그런거지 아니면 맵 하나만하고 그안에 바다인지 땅인지 방문했는지 안했느지 같은 정보를 같이 둬도 되고 그런거겠따 ㅇㅇ
#
# 입력조건
# 첫째줄에 맵의 세로 크기 N과 가로크기 M을 공백으로 구분하여 입력한다 ( 3<= N,M <= 50)
# 둘쨰줄에 게임 캐릭터가 있는 칸의 좌표가 (A,B)와 바라보는 방향 d가 각각 서로 공백으로 구분하여 주어진다. 방향d의 값으로는 다음과 같이 4가지가 존재한다. 0:북쪽 1:동쪽 2:남쪽 3:서쪽
# 셋째줄부터 맵이 육지인지 바다인지에 대한 정보가 주어진다. N개의 줄에 맵의 상태가 북쪽부터 남쪽 순서대로 주어진다. 맵의 외곽은 항상 바다로 되어있따. 0:육지 1:바다
# 처음에 게임 캐릭터가 위치한 칸의 상태는 항상 육지이다. ( 내가 한마디 추가하면 그리고 방문한 것을 간주한다.)
#  
# 출력조건 
# 첫째줄에 이동을 마친후 캐릭터가 방문한 칸의 수를 출력한다.






# 내가한풀이
# 다음기회에 ...

# 책에 나온 풀이
# N,M을 공백으로 구분하여 입력받기
n, m = map(int, input().split())
# 방문한 위치를 저장하기 위한 맵을 생성하여 0으로 초기화
d = [[0] * m for _ in range(n)]
# 현재 캐릭터의 X 좌표 , Y 좌표 , 방향 을 입력받기
x,y,direction = map(int ,input().split())
d[x][y]= 1 # 현재 좌표 방문 처리

# 전체 맵 정보를 입력받기
array = []
for i in range(n) :
    array.append(list(map(int, input().split())))

# 북,동,남,서 방향 정의
dx = [ -1, 0 , 1, 0]
dy = [0,1,0,-1]

# 왼쪽으로 회전
def turn_left():
    global direction
    direction -= 1
    if direction == -1 :
        direction = 3

# 시뮬레이션 시작
count = 1
turn_time = 0
while True :
    # 왼쪽으로 회전
    turn_left()
    nx = x + dx[direction]
    ny = y + dy[direction]
    # 회전한 이후 정면에 가보지 않은 칸이 존재하는 경우 이동
    if d[nx][ny] == 0 and array[nx][ny] == 0:
        d[nx][ny] = 1
        x = nx
        y = ny
        count += 1
        turn_time = 0
        continue
    # 회전한 이후 정면에 가보지 않은 칸이 없거나 바다인 경우
    else :
        turn_time += 1
    # 네방향 모두 갈수 없는 경우
    if turn_time == 4:
        nx = x - dx[direction]
        ny = y - dy[direction]
        # 뒤로 갈 수 있따면 이동하기
        if array[nx][ny] == 0:
            x = nx
            y = ny
        # 뒤가 바다로 막혀있는 경우
        else :
            break
        turn_time = 0

# 정답 출력
print(count)








